{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"8LAIaA,G,KAAc,SAAC,GAAsB,EAApBC,cAAqB,IAAD,EAIZC,mBAAS,IAJG,+B,uBCJrCC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,yBAAKc,UAAU,qCACb,yBAAKA,UAAU,OACbC,IAAKf,EACLgB,IAAKN,IACP,2BAAIA,KCHGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EAEdF,mBAAS,CACjCS,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAuBxC,OAdAC,qBAAU,WAERxB,EAAQC,GACLwB,MAAK,SAAAC,GAEJH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAId,CAACpB,IAGGqB,EDlB2BK,CAAa1B,GAAjCa,EAHyB,EAG/BN,KAAca,EAHiB,EAGjBA,QAGtB,OACE,oCACE,wBAAIJ,UAAU,qCAAqChB,GAClDoB,GAAW,uBAAGJ,UAAU,oCAAb,YAEZ,yBAAKA,UAAU,aAEXH,EAAOJ,KAAI,SAAAC,GAAG,OACZ,kBAAC,EAAD,eACEiB,IAAKjB,EAAIC,IACLD,UEhBLkB,EAAe,WAAM,MAGI9B,mBAAS,CAAC,cAHd,mBAGzB+B,EAHyB,KAGbhC,EAHa,KAYhC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEIgC,EAAWpB,KAAI,SAAAT,GAAQ,OACrB,kBAAC,EAAD,CACE2B,IAAK3B,EACLA,SAAUA,U,MCpBxB8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.8ffaaa95.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n// export const AddCategory = ( props) => { o desestructurar y recibir la funcion\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n  // inputValue es el valor del input y setinputValue es la funcion que actualiza el valor del input\r\n  // si no se lo pone con '' dará error despues al tratar de ingresar el dato\r\n  const [inputValue, setinputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setinputValue(e.target.value);\r\n  }\r\n  // Con esto se previene el comportamiento por default del formulario al pulsar ENTER\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories(cats => [inputValue, ...cats]);\r\n      setinputValue('');\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    // Si hay un elemento agrupador (en este caso form) no es necesario el <> </>\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n\r\n  )\r\n\r\n}\r\n\r\n// Valores obligatorios del componente\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n\r\n}","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=p5G96iiVidlBoK5LWj4XAYycolRumF5y`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n\r\n  return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"animate__animated animate__bounce\">\r\n      <img className=\"card\"\r\n        src={url}\r\n        alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","// import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  // Para renombrar en la desestructuración se agregan : y el nuevo nombre\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Cargando</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map(img => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  // Solo se ejecuta cuando el componente es renderizado la primera vez\r\n  // se agrega la categoría  [category] para evitar el warning\r\n  useEffect(() => {\r\n\r\n    getGifs(category)\r\n      .then(imgs => {\r\n        // setTimeout(() => {\r\n        setstate({\r\n          data: imgs,\r\n          loading: false\r\n        });\r\n        // }, 3000);\r\n      })\r\n  }, [category]);\r\n\r\n\r\n  return state;\r\n\r\n}","import React, { useState } from 'react'\r\n\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  //  const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n\r\n  // const handleAdd = () => {\r\n  //   // se extraen las categorias actuales y se agrega la nueva categoria\r\n  //   //setCategories([...categories, 'HunterXHunter']);\r\n  //   // se agrega la nueva categoria por el callback donde el primer argumento es el estado actual y el segundo es el nuevo estado\r\n  //   setCategories(cats => [...cats, 'HunterXHunter']);\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {\r\n          categories.map(category => (\r\n            <GifGrid\r\n              key={category}\r\n              category={category}\r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}